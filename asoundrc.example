# ALSA needs to be told where to load the plugin from, if it's not
# installed in the default, system-wide plugins directory.

pcm_type.loudness {
    lib "/usr/local/lib/libasound_module_pcm_loudness.so"
}

# This defines the plugin's configuration.  See the README file for
# more information on the various parameters.

pcm.plugloudness {
    type loudness

    # The default setting below, effectively disables multi-threading,
    # as using more than one threads can actually be detrimental to
    # performance.  On some machines though, such as the Raspberry Pi,
    # a value equal to the number of cores, can provide a significant
    # speedup.

    # threads 1

    # The values control the length of the FIR filter, used to perform
    # the compensation, and of the FFT, that implements it.  The
    # defaults should serve in most cases.

    # window 4096
    # fft 16384

    # The setting below is optional. If it points to a writeable file,
    # it will be used as cache to save some CPU time, at the cost of a
    # slower first run.

    # wisdom_path "/home/foo/.cache/alsa/loudness_wisdom"

    # The values below will be used if a mixer control is not desired,
    # or can't be installed.

    reference 82
    attenuation -20

    controls {
        # Leave the line below uncommented, in order to install
        # controls for loudness compensation, in your audio card's
        # mixer.  These will be installed upon first use of the
        # plugin, and probably persist as saved sound card state,
        # along with your normal controls.  To uninstall them, simply
        # change 'install' below to 'uninstall' and play something
        # through the plugin.

        install yes

        # By default, the names of the installed controls, will be
        # 'Attenuation' and 'Reference'.  If these names conflict with
        # existing controls, uncomment the following line to specify a
        # prefix.

        # prefix "My "
    }

    # Edit the line below to specify the card and device to play
    # through, if necessary.

    slave.pcm "plughw:0,0"
}

# alsaloudness does all processing in floating point, so a plug PCM is
# necessary to handle the necessary conversion on both the input and
# output side.  (This is also the reason for specifying plughw above.)

pcm.loudness{
    type plug

    slave {
          pcm plugloudness
    }
}
